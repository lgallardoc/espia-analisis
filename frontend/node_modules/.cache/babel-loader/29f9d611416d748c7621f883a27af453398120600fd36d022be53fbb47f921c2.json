{"ast":null,"code":"var _jsxFileName = \"/Users/lagallardoc/github/espia-analisis/frontend/src/pages/Analysis.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport ReactCountryFlag from \"react-country-flag\";\nimport { countryCodeLookup } from \"country-code-lookup\";\nimport \"../styles/custom.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Analysis() {\n  _s();\n  const [data, setData] = useState([]);\n  const [countries, setCountries] = useState([]);\n  useEffect(() => {\n    axios.get(\"http://localhost:5000/api/files\").then(res => {\n      // Procesar datos para agrupar por esquema y tabla\n      const processed = {};\n      const countrySet = new Set();\n      res.data.forEach(file => {\n        const key = `${file.esquema}_${file.tabla}`;\n        countrySet.add(file.pais);\n        if (!processed[key]) {\n          processed[key] = {\n            esquema: file.esquema,\n            tabla: file.tabla,\n            paises: {}\n          };\n        }\n        processed[key].paises[file.pais] = file.fecha.split(\"T\")[0];\n      });\n      setCountries(Array.from(countrySet).sort());\n      setData(Object.values(processed));\n    }).catch(err => console.error(err));\n  }, []);\n\n  // Obtener código de país ISO para las banderas\n  const getCountryCode = paisCode => {\n    const country = countryCodeLookup.byIso(paisCode) || countryCodeLookup.byFips(paisCode);\n    return (country === null || country === void 0 ? void 0 : country.iso2) || \"CL\"; // Default Chile si no se encuentra\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-8 overflow-x-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold mb-6\",\n      children: \"Matriz de Archivos por Pa\\xEDs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table table-zebra w-full\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Esquema\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Tabla\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this), countries.map(country => /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"text-center\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex flex-col items-center\",\n              children: [/*#__PURE__*/_jsxDEV(ReactCountryFlag, {\n                countryCode: getCountryCode(country),\n                svg: true,\n                style: {\n                  width: \"1.5em\",\n                  height: \"1.5em\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: country\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 17\n            }, this)\n          }, country, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: data.map((item, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.esquema\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.tabla\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this), countries.map(country => /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"text-center\",\n            children: item.paises[country] ? /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"badge badge-success\",\n              children: item.paises[country]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"badge badge-error\",\n              children: \"\\xD7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 21\n            }, this)\n          }, country, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 17\n          }, this))]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(Analysis, \"66rpJChbFZPMR0zcWW0K1Cv0g8s=\");\n_c = Analysis;\nvar _c;\n$RefreshReg$(_c, \"Analysis\");","map":{"version":3,"names":["React","useState","useEffect","axios","ReactCountryFlag","countryCodeLookup","jsxDEV","_jsxDEV","Analysis","_s","data","setData","countries","setCountries","get","then","res","processed","countrySet","Set","forEach","file","key","esquema","tabla","add","pais","paises","fecha","split","Array","from","sort","Object","values","catch","err","console","error","getCountryCode","paisCode","country","byIso","byFips","iso2","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","countryCode","svg","style","width","height","item","index","_c","$RefreshReg$"],"sources":["/Users/lagallardoc/github/espia-analisis/frontend/src/pages/Analysis.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport ReactCountryFlag from \"react-country-flag\";\nimport { countryCodeLookup } from \"country-code-lookup\";\nimport \"../styles/custom.css\";\ninterface FileData {\n  pais: string;\n  esquema: string;\n  tabla: string;\n  fecha: string;\n}\n\ninterface ProcessedData {\n  esquema: string;\n  tabla: string;\n  paises: Record<string, string>; // { CL: fecha, CO: fecha, ... }\n}\n\nexport default function Analysis() {\n  const [data, setData] = useState<ProcessedData[]>([]);\n  const [countries, setCountries] = useState<string[]>([]);\n\n  useEffect(() => {\n    axios\n      .get(\"http://localhost:5000/api/files\")\n      .then((res) => {\n        // Procesar datos para agrupar por esquema y tabla\n        const processed: Record<string, ProcessedData> = {};\n        const countrySet = new Set<string>();\n\n        res.data.forEach((file: FileData) => {\n          const key = `${file.esquema}_${file.tabla}`;\n          countrySet.add(file.pais);\n\n          if (!processed[key]) {\n            processed[key] = {\n              esquema: file.esquema,\n              tabla: file.tabla,\n              paises: {},\n            };\n          }\n          processed[key].paises[file.pais] = file.fecha.split(\"T\")[0];\n        });\n\n        setCountries(Array.from(countrySet).sort());\n        setData(Object.values(processed));\n      })\n      .catch((err) => console.error(err));\n  }, []);\n\n  // Obtener código de país ISO para las banderas\n  const getCountryCode = (paisCode: string) => {\n    const country =\n      countryCodeLookup.byIso(paisCode) || countryCodeLookup.byFips(paisCode);\n    return country?.iso2 || \"CL\"; // Default Chile si no se encuentra\n  };\n\n  return (\n    <div className=\"p-8 overflow-x-auto\">\n      <h1 className=\"text-2xl font-bold mb-6\">Matriz de Archivos por País</h1>\n\n      <table className=\"table table-zebra w-full\">\n        <thead>\n          <tr>\n            <th>Esquema</th>\n            <th>Tabla</th>\n            {countries.map((country) => (\n              <th key={country} className=\"text-center\">\n                <div className=\"flex flex-col items-center\">\n                  <ReactCountryFlag\n                    countryCode={getCountryCode(country)}\n                    svg\n                    style={{ width: \"1.5em\", height: \"1.5em\" }}\n                  />\n                  <span>{country}</span>\n                </div>\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {data.map((item, index) => (\n            <tr key={index}>\n              <td>{item.esquema}</td>\n              <td>{item.tabla}</td>\n              {countries.map((country) => (\n                <td key={country} className=\"text-center\">\n                  {item.paises[country] ? (\n                    <span className=\"badge badge-success\">\n                      {item.paises[country]}\n                    </span>\n                  ) : (\n                    <span className=\"badge badge-error\">×</span>\n                  )}\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}